{"version":3,"sources":["pages/Table.styles.js","images/cardBackground.jpg","components/Cards/Cards.styles.js","components/Cards/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/ControlBar/ControlBar.styles.js","components/ControlBar/index.js","utils/gameLogic.js","pages/Table.js","GlobalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","PlayingTable","cardBack","Content","Card","suit","rank","color","className","Grid","header","children","Button","button","Text","ControlBar","money","count","callbackOne","callbackTwo","type","onClick","initialPlayer","cards","initialDealer","InitialCards","useState","player","setPlayer","dealer","setDealer","deck","setDeck","isAddingCards","setIsAddingCards","isStaying","setIsStaying","newGame","setNewGame","purse","message","setMessage","gameComplete","setGameComplete","dealerStay","setDealerStay","suits","ranks","updatedDeck","tempCard","tempPlayer","tempDealer","tempDeck","checkWin","getCount","rearranged","forEach","card","push","unshift","reduce","total","useEffect","suitCounter","length","ranksCounter","i","randomNum","Math","floor","random","shuffleDeck","cardCount","j","newDeck","slice","console","log","setHands","prev","Table","map","index","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e0acf13.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div `\r\n\r\n    background-color: black;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    .messageDiv{\r\n        text-align: center;\r\n        margin-top: 100px;\r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    \r\n`;\r\n\r\nexport const PlayingTable = styled.div ` \r\n    display: block;\r\n    background-color: rgb(0, 125, 0);\r\n    border: solid 10px brown;\r\n    padding-bottom: 5px;\r\n    border-radius: 25%;\r\n    max-width: var(--maxwidth);\r\n    min-height: 500px;\r\n    @media screen and (max-width: 768px){\r\n        padding-bottom: 60px;\r\n    }\r\n   \r\n     \r\n`;\r\n\r\n","export default __webpack_public_path__ + \"static/media/cardBackground.3d9067ea.jpg\";","import styled from 'styled-components';\r\nimport cardBack from '../../images/cardBackground.jpg'\r\n\r\nexport const Wrapper = styled.div ` \r\n    color: var(--darkGrey);\r\n    background: var(--white);\r\n    border-radius: 15px;\r\n    height: 200px;\r\n    width: 150px;\r\n\r\n    .background{\r\n        background-image: url(${cardBack});\r\n        background-position: center;\r\n        background-size:cover;\r\n    }\r\n   \r\n   .card-red{\r\n       color: red;\r\n   }\r\n   @media screen and (max-width: 760px){\r\n        height: 150px;\r\n        width: 90px;\r\n   }\r\n`;\r\n\r\nexport const Content = styled.div `\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 15px;\r\n    position: relative;\r\n    font-size: 30px;\r\n\r\n    .topRank{\r\n        position: absolute;\r\n        text-align: left;\r\n        top:5px;\r\n        left: 5px;\r\n\r\n   }\r\n   .bottomRank{\r\n       position: absolute;\r\n       bottom: 5px;\r\n       right: 5px;\r\n       text-align: right;\r\n       \r\n   }\r\n   .suit{\r\n        position: absolute;\r\n        top: 35%;\r\n        width: 100%;\r\n        text-align: center;\r\n   }\r\n    \r\n`;\r\n\r\n","import React from 'react';\r\n\r\n//Styles\r\nimport { Wrapper, Content } from './Cards.styles';\r\n\r\n\r\n\r\n\r\nconst Card = ( { suit, rank } ) =>{\r\n    let color = (suit === '♦' || suit === '♥') ? 'card-red' : 'card';\r\n    \r\n    \r\nreturn(  \r\n    <Wrapper>\r\n        <Content className={suit ? `${color}`: 'background'}>\r\n            <div className='topRank'>\r\n                <span>{rank}</span>\r\n            </div>\r\n            <div className='suit'>\r\n                <span>{suit}</span>\r\n            </div>\r\n            <div className='bottomRank'>\r\n                <span>{rank}</span>\r\n            </div>\r\n        </Content>\r\n    </Wrapper>\r\n)}\r\nexport default Card;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div `\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    padding: 10px 30px;\r\n    text-align: center;\r\n\r\n    @media screen and (max-width: 760px){\r\n        padding: 0 20px;\r\n    }\r\n   \r\n`;\r\n\r\nexport const Content = styled.div `\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(150px, 200px));\r\n    grid-gap: 1rem;\r\n    \r\n    @media screen and (max-width: 760px){\r\n        grid-template-columns: repeat(auto-fill, minmax(75px, 100px));\r\n        grid-gap: 1rem;\r\n    }\r\n    \r\n    \r\n`; ","import React from 'react';\r\n//style\r\nimport { Wrapper, Content } from './Grid.styles';\r\n\r\nconst Grid = ({ header, children }) => (\r\n\r\n    <Wrapper>\r\n        <h3>{header}</h3>\r\n        <Content>{children}</Content>\r\n    </Wrapper>\r\n\r\n)\r\n\r\nexport default Grid;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div ` \r\n    background: var(--medGrey);\r\n    text-align: center;\r\n\r\n\r\n`;\r\n\r\nexport const Content = styled.div `\r\n    display: inline-block;\r\n    margin: 0 auto;\r\n    width: 100%;\r\n    .content.children{\r\n        width: 2fr;\r\n    }\r\n\r\n`;\r\n\r\nexport const Button = styled.button `\r\n    display: inline-block;\r\n    min-width: 100px;\r\n    background: var(--darkGrey);\r\n    height: 60px;\r\n    border-radius: 30px;\r\n    color: var(--white);\r\n    border: 0;\r\n    font-size: var(--fontBig);\r\n    margin: 20px 10px;\r\n    transition: all 0.3s;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    :hover{\r\n        opacity: 0.8\r\n    }\r\n   \r\n`;\r\n\r\nexport const Text = styled.div ` \r\n    display: inline-block;\r\n    min-width: 100px;\r\n    height: 60px;\r\n    color: var(--white);\r\n    border: 0;\r\n    font-size: var(--fontBig);\r\n    margin: 20px 20px;\r\n`;\r\n","import React from \"react\";\r\n\r\n//Styles\r\nimport { Wrapper, Content, Button, Text } from \"./ControlBar.styles\";\r\n\r\n\r\n\r\nconst ControlBar = ({money, count, callbackOne, callbackTwo})=>\r\n(\r\n    <Wrapper>\r\n        <Content>\r\n            <Button className=\"hit\" type=\"button\" onClick={callbackOne}>Hit</Button>\r\n            <Button className=\"stay\" type=\"button\" onClick={callbackTwo}>Stay</Button>\r\n            <Text>\r\n                Wallet:\r\n                <span>{\" \" + money}</span>\r\n            </Text>\r\n            <Text>\r\n                Count: \r\n                <span>{\" \" + count}</span>\r\n            </Text> \r\n        </Content>\r\n      \r\n    </Wrapper>\r\n)\r\n\r\n\r\nexport default ControlBar","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\nconst initialPlayer = {\r\n  cards: [],\r\n  count: 0\r\n}\r\nconst initialDealer={\r\n  cards:[],\r\n  count: 0\r\n}\r\n\r\nexport const InitialCards = () =>{\r\n  //Setting States\r\n  const [player, setPlayer]=useState(initialPlayer);\r\n  const [dealer, setDealer]=useState(initialDealer)\r\n  const [deck, setDeck]=useState({});\r\n  const [isAddingCards, setIsAddingCards]=useState(false);\r\n  const [isStaying, setIsStaying]=useState(false);\r\n  const [newGame, setNewGame]=useState(true);\r\n  const [purse, setPurse]=useState(200)\r\n  const [message, setMessage]=useState('')\r\n  const [gameComplete, setGameComplete]=useState(false)\r\n  const [dealerStay, setDealerStay]=useState(false)\r\n  \r\n  \r\n  //Create 52 card Deck by matching number with each suit\r\n  const suits = ['♦','♣','♥','♠'];\r\n  const ranks = [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'];\r\n  \r\n  let updatedDeck = [];\r\n  let tempCard =[];\r\n  let tempPlayer={\r\n      cards:[],\r\n      count:0\r\n  }\r\n  let tempDealer = {\r\n      cards:[],\r\n      count:0\r\n  }\r\n  let tempDeck = []\r\n  const shuffleDeck=()=>{\r\n    //running a loop to separate the 4 suits, Hearts/Clubs/Diamonds/Spades\r\n    for( let suitCounter = 0; suitCounter<suits.length; suitCounter ++ ) {\r\n        //run loop to separate the numbers and combine them with the available 4 suits.\r\n        for( let ranksCounter = 0; ranksCounter<ranks.length; ranksCounter++ ){\r\n         \r\n          updatedDeck.push({rank:ranks[ranksCounter], suit:suits[suitCounter]})\r\n            \r\n        };\r\n    };\r\n\r\n    for ( let i= 0; i<52; i++ )   {\r\n            let tempCard = updatedDeck[i];\r\n            let randomNum = Math.floor( Math.random() * 52 );\r\n            updatedDeck[i] = updatedDeck[ randomNum ];\r\n            updatedDeck[ randomNum ] = tempCard;\r\n    };\r\n  }\r\n  const setHands = (cardCount) =>{\r\n    for ( let j = 0; j < cardCount; j++){\r\n      \r\n          tempDeck = updatedDeck\r\n          tempPlayer.cards.push({rank:tempDeck[j].rank, suit:tempDeck[j].suit})\r\n          // console.log(newDeck)\r\n          let newDeck = tempDeck.slice(1)\r\n          tempDealer.cards.push({rank:newDeck[j].rank, suit:newDeck[j].suit})\r\n          updatedDeck=newDeck.slice(1)\r\n          console.log(updatedDeck)\r\n          setDeck(updatedDeck)\r\n\r\n    }\r\n    setPlayer({\r\n      cards:tempPlayer.cards,\r\n      count:getCount(tempPlayer.cards)\r\n    });\r\n    setDealer({\r\n      cards:tempDealer.cards,\r\n      count:getCount(tempDealer.cards)\r\n    });\r\n    \r\n  }\r\n  const addCard = () => {\r\n      tempCard = deck[1]\r\n      console.log(\"temp \" + tempCard)\r\n      tempPlayer.cards.push({rank:tempCard.rank, suit:tempCard.suit})\r\n      updatedDeck = deck.slice(1)\r\n      setDeck(updatedDeck)\r\n      setPlayer(prev =>({\r\n            \r\n          cards: [...prev.cards, tempPlayer.cards[0]],\r\n          count: getCount([...prev.cards, tempPlayer.cards[0]])\r\n      \r\n      }));\r\n  \r\n  }\r\n  const stay=()=>{\r\n      if(dealer.count < 18){\r\n        tempCard = deck[1]\r\n        console.log(\"temp \" + tempCard)\r\n        tempDealer.cards.push({rank:tempCard.rank, suit:tempCard.suit})\r\n        updatedDeck = deck.slice(1)\r\n        setDealerStay(true)\r\n        setDealer( prev => ({\r\n          \r\n          cards: [...prev.cards, tempDealer.cards[0]],\r\n          count: getCount([...prev.cards, tempDealer.cards[0]])\r\n      \r\n        }));\r\n      } else{\r\n        setDealerStay(true)\r\n      }\r\n    \r\n  }\r\n\r\n\r\n  // if(dealer.count > 18 ){\r\n  //   stay()\r\n  \r\n    \r\n  // }else{\r\n  //     checkWin()\r\n  //     console.log(message)\r\n  // }\r\n   \r\n  // }\r\n  const checkWin = ()=>{\r\n    if(isStaying && dealerStay){\r\n      if(player.count === 21 && dealer.count < 21){\r\n          setGameComplete(true);\r\n          setMessage(\"BlackJack!! You Won!\")\r\n          \r\n      } else if(player.count > dealer.count && player.count <= 21){\r\n        setGameComplete(true);\r\n        setMessage(\"You beat the Dealer!\")\r\n      }else if( dealer.count > 21){\r\n          setGameComplete(true)\r\n          setMessage(\"Dealer Bust! Nice Stay!\")\r\n        \r\n        \r\n      }else if(player.count<=dealer.count){\r\n        setGameComplete(true);\r\n        setMessage(\"Dealer won..\")\r\n        \r\n      }\r\n     \r\n    }else if(player.count > 21){\r\n      setGameComplete(true);\r\n      setMessage('Bust... better luck next time.')\r\n      \r\n    }\r\n  \r\n  }\r\n  \r\n    \r\n    const getCount=(cards)=> {\r\n      const rearranged = [];\r\n      cards.forEach(card => {\r\n        if (card.rank === 'A') {\r\n          rearranged.push(card);\r\n        } else if (card.rank) {\r\n          rearranged.unshift(card);\r\n        }\r\n      });\r\n      \r\n      return rearranged.reduce((total, card) => {\r\n        if (card.rank === 'J' || card.rank === 'Q' || card.rank === 'K') {\r\n          return (total + 10);\r\n        } else if (card.rank === 'A') {\r\n          return (total + 11 <= 21) ? total + 11 : total + 1;\r\n        } else {\r\n          return total + card.rank;\r\n        }\r\n      }, 0);\r\n    };\r\n  \r\n   \r\n    useEffect(()=>{\r\n      if(newGame){\r\n        shuffleDeck()\r\n        setHands(2)\r\n        setDeck(updatedDeck)\r\n        setNewGame(false)\r\n      }else if(!newGame && isAddingCards && !isStaying){\r\n        addCard()\r\n        checkWin()\r\n        setDeck(updatedDeck)\r\n        setIsAddingCards(false)\r\n      }else if(isStaying && !dealerStay){\r\n        stay()\r\n        // setDealer(prev =>({\r\n        //   cards:[...prev.cards], \r\n        //   count:getCount(dealer.cards)\r\n        // }))\r\n        setDeck(updatedDeck)\r\n        checkWin()\r\n      } else{\r\n        checkWin()\r\n      }\r\n    }, [updatedDeck, newGame, isAddingCards, tempDealer, tempPlayer])\r\n\r\n    return {player, dealer, purse, gameComplete, message, setIsAddingCards, setIsStaying}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n//Styles\r\nimport { PlayingTable, Wrapper } from './Table.styles'\r\n//Components\r\nimport Card from '../components/Cards';\r\nimport Grid from '../components/Grid';\r\nimport ControlBar from '../components/ControlBar';\r\n//Utils\r\nimport { InitialCards } from '../utils/gameLogic'\r\n\r\nexport const Table = () =>{\r\n    // States\r\nconst {\r\n    player,\r\n    dealer,\r\n    purse,\r\n    gameComplete, \r\n    message,\r\n    setIsAddingCards,\r\n    setIsStaying\r\n} = InitialCards()\r\n\r\nconsole.log(\"Player: \" + player.count)\r\nconsole.log(\"Dealer: \" + dealer.count)\r\n\r\n      \r\n\r\n   return (\r\n    \r\n        <Wrapper>\r\n            <PlayingTable>\r\n                \r\n                    <div>\r\n                        <Grid header=\"Dealer's Cards\">\r\n                            {dealer.cards.map((card, index )=>(\r\n                                \r\n                                <Card\r\n                                    key={index}\r\n                                    rank={card.rank}\r\n                                    suit={card.suit}\r\n                                />\r\n                            ))}\r\n                            \r\n                        </Grid>\r\n                        <Grid header = \"Your Cards\">\r\n                        {player.cards.map((card, index) =>(\r\n                            <Card\r\n                                key={index}\r\n                                rank={card.rank}\r\n                                suit={card.suit}\r\n                                />\r\n                            ))}\r\n                            \r\n                        </Grid>\r\n                    </div>\r\n                    {!gameComplete ?\r\n                    <span></span>\r\n                    :\r\n                    <div className=\"messageDiv\">\r\n                    <h1>{message}</h1>\r\n                    <p>\r\n                        Player Count: \r\n                        <span>\r\n                            {player.count}\r\n                        </span>\r\n                    </p>\r\n                    <p>\r\n                        Dealer Count: <span>\r\n                            {dealer.count}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                }   \r\n                </PlayingTable>\r\n            \r\n            <ControlBar   \r\n                money={purse}\r\n                count={player.count} callbackOne ={\r\n                    ()=> setIsAddingCards(true)\r\n                }\r\n                callbackTwo ={\r\n                    ()=> setIsStaying(true)\r\n                }     \r\n            />\r\n            \r\n        </Wrapper>\r\n        \r\n    \r\n   )\r\n   \r\n}\r\nexport default Table;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle `\r\n    :root{\r\n        --maxWidth: 1280px;\r\n        --white: #fff;\r\n        --lightGrey: #eee;\r\n        --medGrey: #353535;\r\n        --darkGrey: #1c1c1c;\r\n        --fontSuperBig: 2.5rem;\r\n        --fontBig: 1.5rem;\r\n        --fontMed: 1.2rem;\r\n        --fontSmall: 1rem;\r\n    }       \r\n    *{\r\n        box-sizing: border-box;\r\n        font-family: 'Abel', sans-serif;\r\n    }\r\n    body{\r\n        margin: 0;\r\n        padding: 0;\r\n        \r\n        h1{\r\n            font-size: 2rem;\r\n            font-weight: 600;\r\n            color: var(--white)\r\n        }\r\n        h3{\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n\r\n        }\r\n        p{\r\n            font-size: 1rem;\r\n            color: var(--white)\r\n        }\r\n\r\n    }\r\n    \r\n`","import React from 'react'\r\nimport Table from './pages/Table'\r\n\r\n//styles\r\nimport { GlobalStyle } from './GlobalStyles';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Table />\r\n      <GlobalStyle />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}