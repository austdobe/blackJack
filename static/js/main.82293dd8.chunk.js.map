{"version":3,"sources":["pages/Table.styles.js","images/cardBackground.jpg","components/Cards/Cards.styles.js","components/Cards/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/ControlBar/ControlBar.styles.js","components/ControlBar/index.js","utils/gameLogic.js","pages/Table.js","GlobalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","PlayingTable","cardBack","Content","Card","suit","rank","color","className","Grid","header","children","Button","button","Text","ControlBar","money","count","callbackOne","callbackTwo","type","onClick","initialPlayer","cards","initialDealer","InitialCards","useState","player","setPlayer","dealer","setDealer","deck","setDeck","isAddingCards","setIsAddingCards","isStaying","setIsStaying","newGame","setNewGame","purse","suits","ranks","updatedDeck","tempCard","tempPlayer","tempDealer","tempDeck","getCount","rearranged","forEach","card","push","unshift","reduce","total","useEffect","console","log","slice","prev","suitCounter","length","ranksCounter","i","randomNum","Math","floor","random","shuffleDeck","cardCount","j","newDeck","setHands","update","$set","Table","map","index","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82293dd8.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div ` \r\n    background-color: black;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    \r\n    \r\n`;\r\n\r\nexport const PlayingTable = styled.div ` \r\n    display: block;\r\n    background-color: rgb(0, 125, 0);\r\n    border: solid 10px brown;\r\n    padding-bottom: 5px;\r\n    border-radius: 25%;\r\n    max-width: var(--maxwidth);\r\n    min-height: 500px;\r\n     \r\n`;\r\n\r\n","export default __webpack_public_path__ + \"static/media/cardBackground.3d9067ea.jpg\";","import styled from 'styled-components';\r\nimport cardBack from '../../images/cardBackground.jpg'\r\n\r\nexport const Wrapper = styled.div ` \r\n    color: var(--darkGrey);\r\n    background: var(--white);\r\n    border-radius: 15px;\r\n    height: 200px;\r\n    width: 150px;\r\n\r\n    .background{\r\n        background-image: url(${cardBack});\r\n        background-position: center;\r\n        background-size:cover;\r\n    }\r\n   \r\n   .card-red{\r\n       color: red;\r\n   }\r\n   @media screen and (max-width: 760px){\r\n        height: 150px;\r\n        width: 90px;\r\n   }\r\n`;\r\n\r\nexport const Content = styled.div `\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 15px;\r\n    position: relative;\r\n    font-size: 30px;\r\n\r\n    .topRank{\r\n        position: absolute;\r\n        text-align: left;\r\n        top:5px;\r\n        left: 5px;\r\n\r\n   }\r\n   .bottomRank{\r\n       position: absolute;\r\n       bottom: 5px;\r\n       right: 5px;\r\n       text-align: right;\r\n       \r\n   }\r\n   .suit{\r\n        position: absolute;\r\n        top: 35%;\r\n        width: 100%;\r\n        text-align: center;\r\n   }\r\n    \r\n`;\r\n\r\n","import React from 'react';\r\n\r\n//Styles\r\nimport { Wrapper, Content } from './Cards.styles';\r\n\r\n\r\n\r\n\r\nconst Card = ( { suit, rank } ) =>{\r\n    let color = (suit === '♦' || suit === '♥') ? 'card-red' : 'card';\r\n    \r\n    \r\nreturn(  \r\n    <Wrapper>\r\n        <Content className={suit ? `${color}`: 'background'}>\r\n            <div className='topRank'>\r\n                <span>{rank}</span>\r\n            </div>\r\n            <div className='suit'>\r\n                <span>{suit}</span>\r\n            </div>\r\n            <div className='bottomRank'>\r\n                <span>{rank}</span>\r\n            </div>\r\n        </Content>\r\n    </Wrapper>\r\n)}\r\nexport default Card;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div `\r\n    max-width: 1000px;\r\n    margin: 0 auto;\r\n    padding: 10px 30px;\r\n    text-align: center;\r\n\r\n    @media screen and (max-width: 760px){\r\n        padding: 0 20px;\r\n    }\r\n   \r\n`;\r\n\r\nexport const Content = styled.div `\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(150px, 200px));\r\n    grid-gap: 1rem;\r\n    \r\n    @media screen and (max-width: 760px){\r\n        grid-template-columns: repeat(auto-fill, minmax(75px, 100px));\r\n        grid-gap: 1rem;\r\n    }\r\n    \r\n    \r\n`; ","import React from 'react';\r\n//style\r\nimport { Wrapper, Content } from './Grid.styles';\r\n\r\nconst Grid = ({ header, children }) => (\r\n\r\n    <Wrapper>\r\n        <h3>{header}</h3>\r\n        <Content>{children}</Content>\r\n    </Wrapper>\r\n\r\n)\r\n\r\nexport default Grid;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div ` \r\n    background: var(--medGrey);\r\n    text-align: center;\r\n\r\n\r\n`;\r\n\r\nexport const Content = styled.div `\r\n    display: inline-block;\r\n    margin: 0 auto;\r\n    width: 100%;\r\n    .content.children{\r\n        width: 2fr;\r\n    }\r\n\r\n`;\r\n\r\nexport const Button = styled.button `\r\n    display: inline-block;\r\n    min-width: 100px;\r\n    background: var(--darkGrey);\r\n    height: 60px;\r\n    border-radius: 30px;\r\n    color: var(--white);\r\n    border: 0;\r\n    font-size: var(--fontBig);\r\n    margin: 20px 10px;\r\n    transition: all 0.3s;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    :hover{\r\n        opacity: 0.8\r\n    }\r\n   \r\n`;\r\n\r\nexport const Text = styled.div ` \r\n    display: inline-block;\r\n    min-width: 100px;\r\n    height: 60px;\r\n    color: var(--white);\r\n    border: 0;\r\n    font-size: var(--fontBig);\r\n    margin: 20px 20px;\r\n`;\r\n","import React from \"react\";\r\n\r\n//Styles\r\nimport { Wrapper, Content, Button, Text } from \"./ControlBar.styles\";\r\n\r\n\r\nconst ControlBar = ({money, count, callbackOne, callbackTwo})=>(\r\n    <Wrapper>\r\n        <Content>\r\n            <Button className=\"hit\" type=\"button\" onClick={callbackOne}>Hit</Button>\r\n            <Button className=\"stay\" type=\"button\" onClick={callbackTwo}>Stay</Button>\r\n            <Text>\r\n                Wallet:\r\n                <span>{\" \" + money}</span>\r\n            </Text>\r\n            <Text>\r\n                Count: \r\n                <span>{\" \" + count}</span>\r\n            </Text>\r\n            \r\n        \r\n              \r\n               \r\n        </Content>\r\n    </Wrapper>\r\n)\r\n\r\nexport default ControlBar","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport update from 'react-addons-update';\r\n\r\n\r\nconst initialPlayer = {\r\n  cards: [],\r\n  count: 0\r\n}\r\nconst initialDealer={\r\n  cards:[],\r\n  count: 0\r\n}\r\n\r\nexport const InitialCards = () =>{\r\n  //Setting States\r\n  const [player, setPlayer]=useState(initialPlayer);\r\n  const [dealer, setDealer]=useState(initialDealer)\r\n  const [deck, setDeck]=useState({});\r\n  const [isAddingCards, setIsAddingCards]=useState(false);\r\n  const [isStaying, setIsStaying]=useState(false);\r\n  const [newGame, setNewGame]=useState(true);\r\n  const [purse, setPurse]=useState(200)\r\n  const [message, setMessage]=useState('')\r\n  \r\n  \r\n  //Create 52 card Deck by matching number with each suit\r\n  const suits = ['♦','♣','♥','♠'];\r\n  const ranks = [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'];\r\n  \r\n  let updatedDeck = [];\r\n  let tempCard =[];\r\n  let tempPlayer={\r\n      cards:[],\r\n      count:0\r\n  }\r\n  let tempDealer = {\r\n      cards:[],\r\n      count:0\r\n  }\r\n  let tempDeck = []\r\n  const shuffleDeck=()=>{\r\n    //running a loop to separate the 4 suits, Hearts/Clubs/Diamonds/Spades\r\n    for( let suitCounter = 0; suitCounter<suits.length; suitCounter ++ ) {\r\n        //run loop to separate the numbers and combine them with the available 4 suits.\r\n        for( let ranksCounter = 0; ranksCounter<ranks.length; ranksCounter++ ){\r\n         \r\n          updatedDeck.push({rank:ranks[ranksCounter], suit:suits[suitCounter]})\r\n            \r\n        };\r\n    };\r\n\r\n    for ( let i= 0; i<52; i++ )   {\r\n            let tempCard = updatedDeck[i];\r\n            let randomNum = Math.floor( Math.random() * 52 );\r\n            updatedDeck[i] = updatedDeck[ randomNum ];\r\n            updatedDeck[ randomNum ] = tempCard;\r\n    };\r\n  }\r\n  const setHands = (cardCount) =>{\r\n    for ( let j = 0; j < cardCount; j++){\r\n         if(j > 0){ \r\n          tempDeck = updatedDeck\r\n          tempPlayer.cards.push({rank:tempDeck[j].rank, suit:tempDeck[j].suit})\r\n          let newDeck = tempDeck.slice(1)\r\n          // console.log(newDeck)\r\n          tempDealer.cards.push({rank:newDeck[j].rank, suit:newDeck[j].suit})\r\n          updatedDeck=newDeck.slice(1)\r\n          setDeck(updatedDeck);\r\n          console.log(updatedDeck)\r\n         }\r\n         else{\r\n          tempDeck = updatedDeck\r\n          tempPlayer.cards.push({rank:tempDeck[j].rank, suit:tempDeck[j].suit})\r\n          tempDealer.cards.push([])\r\n          let newDeck = tempDeck.slice(1)\r\n          updatedDeck=newDeck.slice(1)\r\n          setDeck(updatedDeck);\r\n          console.log(updatedDeck)\r\n          \r\n        }\r\n        \r\n    }\r\n    setPlayer({\r\n      cards:tempPlayer.cards,\r\n      count:getCount(tempPlayer.cards)\r\n    });\r\n    setDealer({\r\n      cards:tempDealer.cards,\r\n      count:getCount(tempDealer.cards)\r\n    });\r\n  }\r\n  const addCard = () => {\r\n    tempCard = deck[0]\r\n    console.log(\"temp \" + tempCard)\r\n    tempPlayer.cards.push({rank:tempCard.rank, suit:tempCard.suit})\r\n    updatedDeck = deck.slice(1)\r\n    setDeck(updatedDeck)\r\n    setPlayer(prev =>({\r\n          \r\n        cards: [...prev.cards, tempPlayer.cards[0]],\r\n        count: getCount([...prev.cards, tempPlayer.cards[0]])\r\n    \r\n    }));\r\n  }\r\n  const stay=()=>{\r\n      tempCard = deck[0]\r\n      console.log(\"temp \" + tempCard)\r\n      tempDealer.cards.push({rank:tempCard.rank, suit:tempCard.suit})\r\n      updatedDeck = deck.slice(1)\r\n      setDeck(updatedDeck)\r\n      setDealer( prev => ({\r\n          \r\n        cards: [...prev.cards, update(dealer.cards[0], {$set:tempDealer.cards[0]})],\r\n        count: getCount(dealer.cards)\r\n    \r\n    }));\r\n  }\r\n\r\n\r\n  // if(dealer.count > 18 ){\r\n  //   stay()\r\n  \r\n    \r\n  // }else{\r\n  //     checkWin()\r\n  //     console.log(message)\r\n  // }\r\n   \r\n  // }\r\n  const checkWin = ()=>{\r\n    if(player.count === 21 && dealer.count < 21){\r\n        setMessage(\"BlackJack!! You Won!\")\r\n    } else if(player.count > dealer.count && player.count <= 21){\r\n      setMessage(\"You beat the Dealer!\")\r\n    }else if(player.count > 21){\r\n      setMessage('Bust... better luck next time.')\r\n    }else{\r\n      setMessage(\"Dealer won..\")\r\n    }\r\n    \r\n  }\r\n  \r\n    \r\n    const getCount=(cards)=> {\r\n      const rearranged = [];\r\n      cards.forEach(card => {\r\n        if (card.rank === 'A') {\r\n          rearranged.push(card);\r\n        } else if (card.rank) {\r\n          rearranged.unshift(card);\r\n        }\r\n      });\r\n      \r\n      return rearranged.reduce((total, card) => {\r\n        if (card.rank === 'J' || card.rank === 'Q' || card.rank === 'K') {\r\n          return (total + 10);\r\n        } else if (card.rank === 'A') {\r\n          return (total + 11 <= 21) ? total + 11 : total + 1;\r\n        } else {\r\n          return total + card.rank;\r\n        }\r\n      }, 0);\r\n    };\r\n  \r\n   \r\n    useEffect(()=>{\r\n      if(!newGame && isAddingCards){\r\n        addCard()\r\n        setIsAddingCards(false)\r\n      }else if(newGame){\r\n        shuffleDeck()\r\n        setDeck(updatedDeck)\r\n        setHands(2)\r\n        setNewGame(false)\r\n      }else if(isStaying){\r\n        stay()\r\n        setIsStaying(false)\r\n      } \r\n    }, [updatedDeck, newGame, isAddingCards, tempDealer, tempPlayer])\r\n    // console.log(deck)\r\n    // console.log('player '+ player)\r\n    // console.log('dealer '+ dealer)\r\n\r\n    return {player, dealer, purse, setIsAddingCards, setIsStaying}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n//Styles\r\nimport { PlayingTable, Wrapper } from './Table.styles'\r\n//Components\r\nimport Card from '../components/Cards';\r\nimport Grid from '../components/Grid';\r\nimport ControlBar from '../components/ControlBar';\r\n//Utils\r\nimport { InitialCards } from '../utils/gameLogic'\r\n\r\nexport const Table = () =>{\r\n    // States\r\nconst {\r\n    player,\r\n    dealer,\r\n    purse,\r\n    setIsAddingCards,\r\n    setIsStaying\r\n} = InitialCards()\r\n\r\nconsole.log(\"Player: \" + player.cards)\r\nconsole.log(\"Dealer: \" + dealer.cards)\r\n\r\n      \r\n\r\n   return (\r\n    \r\n        <Wrapper>\r\n            <PlayingTable>\r\n                <Grid header=\"Dealer's Cards\">\r\n                    {dealer.cards.map((card, index )=>(\r\n                        \r\n                        <Card\r\n                            key={index}\r\n                            rank={card.rank}\r\n                            suit={card.suit}\r\n                        />\r\n                    ))}\r\n                    \r\n                </Grid>\r\n                <Grid header = \"Your Cards\">\r\n                   {player.cards.map((card, index) =>(\r\n                    <Card\r\n                        key={index}\r\n                        rank={card.rank}\r\n                        suit={card.suit}\r\n                        />\r\n                    ))}\r\n                    \r\n                </Grid>\r\n            </PlayingTable>\r\n            <ControlBar \r\n                money={purse}\r\n                count={player.count} callbackOne ={\r\n                    ()=> setIsAddingCards(true)\r\n                }\r\n                callbackTwo ={\r\n                    ()=> setIsStaying(true)\r\n                }\r\n                \r\n                />\r\n            \r\n        </Wrapper>\r\n        \r\n    \r\n   )\r\n   \r\n}\r\nexport default Table;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle `\r\n    :root{\r\n        --maxWidth: 1280px;\r\n        --white: #fff;\r\n        --lightGrey: #eee;\r\n        --medGrey: #353535;\r\n        --darkGrey: #1c1c1c;\r\n        --fontSuperBig: 2.5rem;\r\n        --fontBig: 1.5rem;\r\n        --fontMed: 1.2rem;\r\n        --fontSmall: 1rem;\r\n    }       \r\n    *{\r\n        box-sizing: border-box;\r\n        font-family: 'Abel', sans-serif;\r\n    }\r\n    body{\r\n        margin: 0;\r\n        padding: 0;\r\n        \r\n        h1{\r\n            font-size: 2rem;\r\n            font-weight: 600;\r\n            color: var(--white)\r\n        }\r\n        h3{\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n\r\n        }\r\n        p{\r\n            font-size: 1rem;\r\n            color: var(--white)\r\n        }\r\n\r\n    }\r\n    \r\n`","import React from 'react'\r\nimport Table from './pages/Table'\r\n\r\n//styles\r\nimport { GlobalStyle } from './GlobalStyles';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Table />\r\n      <GlobalStyle />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}